<h1>Retail Sales Analysis SQL Project</h1>


## Project Overview

**Project Title**: Retail Sales Analysis
**Level**: Beginner
**Database**: `p1_retail_db`

This project is designed to demonstrate SQL skills and techniques typically used by data analysts to explore, clean, and analyze retail sales data. The project involves setting up a retail sales database, performing exploratory data analysis (EDA), and answering specific business questions through SQL queries. This project is ideal for those who are starting their journey in data analysis and want to build a solid foundation in SQL.

## Objectives

1. **Set up a retail sales database**: Create and populate a retail sales database with the provided sales data.
2. **Data Cleaning**: Identify and remove any records with missing or null values.
3. **Exploratory Data Analysis (EDA)**: Perform basic exploratory data analysis to understand the dataset.
4. **Business Analysis**: Use SQL to answer specific business questions and derive insights from the sales data.

## Project Structure

### 1. Database Setup

* **Database Creation**: The project starts by creating a database named `p1_retail_db`.
* **Table Creation**: A table named `retail_sales` is created to store the sales data. The table structure includes columns for transaction ID, sale date, sale time, customer ID, gender, age, product category, quantity sold, price per unit, cost of goods sold (COGS), and total sale amount.

```sql
CREATE DATABASE p1_retail_db;

CREATE TABLE retail_sales
(
    transactions_id INT PRIMARY KEY,
    sale_date DATE,	
    sale_time TIME,
    customer_id INT,	
    gender VARCHAR(10),
    age INT,
    category VARCHAR(35),
    quantity INT,
    price_per_unit FLOAT,	
    cogs FLOAT,
    total_sale FLOAT
);
```

### 2. Data Exploration & Cleaning

```sql
-- Record Count
SELECT COUNT(*) FROM retail_sales;

-- Customer Count
SELECT COUNT(DISTINCT customer_id) FROM retail_sales;

-- Category Count
SELECT DISTINCT category FROM retail_sales;

-- Null Value Check
SELECT * FROM retail_sales
WHERE
    sale_date IS NULL OR sale_time IS NULL OR customer_id IS NULL OR
    gender IS NULL OR age IS NULL OR category IS NULL OR
    quantity IS NULL OR price_per_unit IS NULL OR cogs IS NULL;

-- Delete Records with Nulls
DELETE FROM retail_sales
WHERE
    sale_date IS NULL OR sale_time IS NULL OR customer_id IS NULL OR
    gender IS NULL OR age IS NULL OR category IS NULL OR
    quantity IS NULL OR price_per_unit IS NULL OR cogs IS NULL;
```

### 3. Data Analysis & Findings

#### 1. Sales on '2022-11-05'

```sql
SELECT *
FROM retail_sales
WHERE sale_date = '2022-11-05';
```

#### 2. Clothing category, quantity > 4, Nov-2022

```sql
SELECT *
FROM retail_sales
WHERE category = 'Clothing'
  AND TO_CHAR(sale_date, 'YYYY-MM') = '2022-11'
  AND quantity >= 4;
```

#### 3. Total sales per category

```sql
SELECT category, SUM(total_sale) as net_sale, COUNT(*) as total_orders
FROM retail_sales
GROUP BY category;
```

#### 4. Average age of 'Beauty' customers

```sql
SELECT ROUND(AVG(age), 2) as avg_age
FROM retail_sales
WHERE category = 'Beauty';
```

#### 5. Transactions with total\_sale > 1000

```sql
SELECT *
FROM retail_sales
WHERE total_sale > 1000;
```

#### 6. Transactions by gender and category

```sql
SELECT category, gender, COUNT(*) as total_trans
FROM retail_sales
GROUP BY category, gender
ORDER BY category;
```

#### 7. Average monthly sales and top months per year

```sql
SELECT year, month, avg_sale
FROM (
  SELECT
    EXTRACT(YEAR FROM sale_date) as year,
    EXTRACT(MONTH FROM sale_date) as month,
    AVG(total_sale) as avg_sale,
    RANK() OVER(PARTITION BY EXTRACT(YEAR FROM sale_date) ORDER BY AVG(total_sale) DESC) as rank
  FROM retail_sales
  GROUP BY year, month
) as t1
WHERE rank = 1;
```

#### 8. Top 5 customers by total sales

```sql
SELECT customer_id, SUM(total_sale) as total_sales
FROM retail_sales
GROUP BY customer_id
ORDER BY total_sales DESC
LIMIT 5;
```

#### 9. Unique customers per category

```sql
SELECT category, COUNT(DISTINCT customer_id) as cnt_unique_cs
FROM retail_sales
GROUP BY category;
```

#### 10. Orders by shift (Morning, Afternoon, Evening)

```sql
WITH hourly_sale AS (
  SELECT *,
    CASE
      WHEN EXTRACT(HOUR FROM sale_time) < 12 THEN 'Morning'
      WHEN EXTRACT(HOUR FROM sale_time) BETWEEN 12 AND 17 THEN 'Afternoon'
      ELSE 'Evening'
    END as shift
  FROM retail_sales
)
SELECT shift, COUNT(*) as total_orders
FROM hourly_sale
GROUP BY shift;
```

## Findings

* **Customer Demographics**: Customers span various age groups and categories.
* **High-Value Transactions**: Significant transactions >1000 indicate high-value customers.
* **Sales Trends**: Seasonal and monthly sales variations help identify peak months.
* **Customer Insights**: Top-spending customers and category-wise uniqueness observed.

## Reports

* **Sales Summary**: Overall and category-wise sales performance.
* **Trend Analysis**: Insights across time periods and sales shifts.
* **Customer Insights**: Identifying top contributors and demographics.

## Conclusion

This project serves as a comprehensive introduction to SQL for data analysts, covering:

* Database setup
* Data cleaning
* Exploratory data analysis
* Business-driven SQL queries

The insights gained from this data can drive strategic business decisions.

## How to Use

1. **Clone the Repository**

```bash
git clone https://github.com/your-username/retail-sales-sql-project.git
cd retail-sales-sql-project
```

2. **Set Up the Database**
   Run `database_setup.sql` to create and populate your PostgreSQL or MySQL database.

3. **Run the Queries**
   Use queries in `analysis_queries.sql` to perform your analysis.

4. **Explore and Modify**
   Customize queries to explore additional business questions.

---

**Happy Querying!** ðŸ§ ðŸ“ŠðŸ’¡
